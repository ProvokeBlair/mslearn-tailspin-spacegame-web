trigger:
- '*'
pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  acrName: 'SpaceGameContainer'  # ACR name (without .azurecr.io)
  imageName: 'tailspin-spacegame'
  tag: '$(Build.BuildId)'  # Unique tag per build
  latestTag: 'latest'
  serviceName: 'SpaceGameMSDemo'  # Azure Web App name
  resourceGroup: 'DemoSpaceGame'  # Azure Resource Group
  azureSubscription: 'BlairSpaceGameDemo'  # Azure DevOps service connection
  appServicePlan: 'F1'  # App Service Plan name
  location: 'NZN'  # Change this to your preferred region

steps:
# Use .NET SDK 6.x
- task: UseDotNet@2
  displayName: 'Use .NET SDK 6.x'
  inputs:
    packageType: sdk
    version: '6.x'

# Run npm install
- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

# Compile Sass assets
- script: './node_modules/.bin/node-sass Tailspin.SpaceGame.Web/wwwroot --output Tailspin.SpaceGame.Web/wwwroot'
  displayName: 'Compile Sass assets'

# Run gulp tasks
- task: gulp@1
  displayName: 'Run gulp tasks'

# Write build info
- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: Tailspin.SpaceGame.Web/wwwroot

# Restore project dependencies
- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# Build the project
- task: DotNetCoreCLI@2
  displayName: 'Build the project - Release'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration Release'
    projects: '**/*.csproj'
    
# Publish the project
- task: DotNetCoreCLI@2
  displayName: 'Publish the project - Release'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Release'
    zipAfterPublish: true

# Publish build artifacts
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()

# Docker Build & Push to ACR
- task: AzureCLI@2
  displayName: "Login to ACR"
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az acr login --name $(acrName)

# Deploy to Azure Web App (Production)
- task: AzureWebAppContainer@1
  displayName: "Deploy to Production"
  inputs:
    azureSubscription: $(azureSubscription)
    appName: $(serviceName)
    containers: "$(acrName).azurecr.io/$(imageName):$(tag)"


